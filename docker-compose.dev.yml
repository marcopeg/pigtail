version: '2.1'
services:

    barn:
        build:
            context: ./services/barn
            dockerfile: Dockerfile.dev
        depends_on:
            - postgres
        networks:
            - development
        ports:
            - ${BACKEND_PORT:-5051}:8080
        environment:
            NODE_ENV: ${NODE_ENV:-development}
            LOG_LEVEL: ${LOG_LEVEL:-info}
            PG_HOST: postgres
            PG_PORT: 5432
            PG_DATABASE: ${PG_DATABASE:-postgres}
            PG_USERNAME: ${PG_USERNAME:-postgres}
            PG_PASSWORD: ${PG_PASSWORD:-postgres}
            PG_MAX_CONN_ATTEMPTS: ${PG_MAX_CONN_ATTEMPTS:-10}
            PG_CONN_ATTEMPTS_DELAY: ${PG_CONN_ATTEMPTS_DELAY:-2500}
            GRAPHQL_MOUNT_POINT: ${GRAPHQL_MOUNT_POINT:-/api}
            REACT_SSR: ${REACT_SSR:-no}
            REACT_SSR_ENABLED: ${REACT_SSR_ENABLED:-no}
            REACT_SSR_USE_CACHE: ${REACT_SSR_USE_CACHE:-no}
            API_DEFAULT_TOKEN: ${API_TOKEN:-xxx}
            EXTENSIONS: ${BARN_EXTENSIONS:-}
        volumes:
            - ./services/barn/ssr:/usr/src/app/ssr
            - ./services/barn/src:/usr/src/app/src
            - ./services/barn/build:/usr/src/app/build
            - ./extensions/barn:/var/lib/pigtail/extensions
        working_dir: /usr/src/app
        entrypoint: [ "yarn", "start:dev:api" ]

    app:
        build:
            context: ./services/barn
            dockerfile: Dockerfile.dev
        networks:
            - development
        ports:
            - ${FRONTEND_PORT:-5052}:3000
        volumes:
            - ./services/barn/src:/usr/src/app/src
            - ./services/barn/build:/usr/src/app/build
        working_dir: /usr/src/app
        entrypoint: [ "yarn", "start" ]

    build:
        build:
            context: ./services/barn
            dockerfile: Dockerfile.dev
        volumes:
            - ./services/barn/src:/usr/src/app/src
            - ./services/barn/build:/usr/src/app/build
        working_dir: /usr/src/app
        entrypoint: [ "yarn", "build" ]

    reaper:
        build:
            context: ./services/reaper
            dockerfile: Dockerfile.dev
        networks:
            - development
        environment:
            NODE_ENV: ${NODE_ENV:-development}
            LOG_LEVEL: ${LOG_LEVEL:-verbose}
            API_ENDPOINT: ${API_ENDPOINT:-http://barn:8080/api}
            API_TOKEN: ${API_TOKEN:-xxx}
            HOST_NAME: ${HOST_NAME:-localhost}
            EXTENSIONS: ${REAPER_EXTENSIONS:-}
            METRIC_HOST_DISK_FILTER: ;;/;;
        volumes:
            - /var/lib/docker/containers:/var/lib/docker/containers:ro
            - /var/run/docker.sock:/var/run/docker.sock
            - ./services/reaper/ssr:/usr/src/app/ssr
            - ./extensions/reaper:/var/lib/pigtail/extensions
            - ./data/pg:/var/lib/pigtail/fsize/pigtail-pg
        working_dir: /usr/src/app
        entrypoint: [ "yarn", "start:dev" ]

    grafana:
        image: grafana/grafana:5.4.3
        networks:
            - development
        ports:
            - ${GRAFANA_PORT-5053}:3000
        environment:
            - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-grafana}
            - GF_SERVER_ROOT_URL=http://grafana:3000/grafana/
        volumes:
            - ${HUMBLE_DATA}/grafana:/var/lib/grafana

    boards:
        image: grafana/grafana:5.4.3
        networks:
            - development
        ports:
            - ${GRAFANA_BOARDS_PORT-5054}:3000
        environment:
            - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-grafana}
            - GF_SERVER_ROOT_URL=http://grafana:3000/boards/
            - GF_AUTH_PROXY_AUTO_SIGN_UP=false
            - GF_AUTH_PROXY_ENABLED=true
        volumes:
            - ${HUMBLE_DATA}/grafana:/var/lib/grafana

    postgres:
        image: timescale/timescaledb:1.2.0-pg11
        networks:
            - development
        ports:
            - ${PG_PORT-5055}:5432
        environment:
            POSTGRES_USER: ${PG_USERNAME:-postgres}
            POSTGRES_PASSWORD: ${PG_PASSWORD:-postgres}
            POSTGRES_DB: ${PG_DATABASE:-postgres}
        volumes:
            - ${HUMBLE_DATA}/pg:/var/lib/postgresql/data
            - ${HUMBLE_BACKUP}:/backup
        restart: always
        healthcheck:
            test: ["CMD", "pg_isready", "-q", "-d", "${PG_DATABASE:-postgres}", "-U", "${PG_USERNAME:-postgres}"]
            interval: 10s
            timeout: 10s
            retries: 10

    proxy:
        build:
            context: ./services/proxy
            dockerfile: Dockerfile
        networks:
            - development
        depends_on:
            - barn
            - grafana
            - boards
            - postgres
        ports:
            - ${PROXY_PORT:-5050}:80
        environment:
            - BOARDS_ENABLED=${BOARDS_ENABLED:-false}
            - BOARDS_TOKEN=${BOARDS_TOKEN:-}
        volumes:
            - ./services/proxy/src:/usr/share/nginx/html:ro
        restart: always
    
networks:
    development:
