version: '2.1'
services:

    postgres:
        image: timescale/timescaledb:1.2.0-pg11
        networks:
            - development
        ports:
            - ${PG_PORT-5432}:5432
        environment:
            POSTGRES_USER: ${PG_USERNAME:-postgres}
            POSTGRES_PASSWORD: ${PG_PASSWORD:-postgres}
            POSTGRES_DB: ${PG_DATABASE:-postgres}
        volumes:
            - ${HUMBLE_DATA}/pg:/var/lib/postgresql/data
            - ${HUMBLE_BACKUP}:/backup
        restart: always
        healthcheck:
            test: ["CMD", "pg_isready", "-q", "-d", "content", "-U", "rawb_content_user"]
            interval: 10s
            timeout: 10s
            retries: 10

    grafana:
        image: grafana/grafana:5.4.3
        networks:
            - development
        ports:
            - ${GRAFANA_PORT-3000}:3000
        environment:
            GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-grafana}
        volumes:
            - ${HUMBLE_DATA}/grafana:/var/lib/grafana

    api:
        build:
            context: ./services/webapp
            dockerfile: Dockerfile.dev
        depends_on:
            - postgres
        networks:
            - development
        ports:
            - ${SERVER_PORT:-8080}:8080
        environment:
            APP_ID: ${APP_ID}
            NODE_ENV: ${NODE_ENV:-development}
            BABEL_ENV: ${BABEL_ENV:-node}
            LOG_LEVEL: ${LOG_LEVEL:-verbose}
            PG_HOST: postgres
            PG_PORT: 5432
            PG_DATABASE: ${PG_DATABASE:-postgres}
            PG_USERNAME: ${PG_USERNAME:-postgres}
            PG_PASSWORD: ${PG_PASSWORD:-postgres}
            PG_MAX_CONN_ATTEMPTS: ${PG_MAX_CONN_ATTEMPTS:-10}
            PG_CONN_ATTEMPTS_DELAY: ${PG_CONN_ATTEMPTS_DELAY:-500}
            SERVER_PORT: 8080
            GRAPHQL_MOUNT_POINT: ${GRAPHQL_MOUNT_POINT:-/api}
            REACT_SSR: ${REACT_SSR:-yes}
            REACT_SSR_ENABLED: ${REACT_SSR_ENABLED:-no}
            REACT_SSR_USE_CACHE: ${REACT_SSR_USE_CACHE:-no}
        volumes:
            - ./services/webapp/ssr:/usr/src/app/ssr
            - ./services/webapp/src:/usr/src/app/src
            - ./services/webapp/build:/usr/src/app/build
        working_dir: /usr/src/app
        entrypoint: [ "yarn", "start:dev:api" ]

    app:
        build:
            context: ./services/webapp
            dockerfile: Dockerfile.dev
        networks:
            - development
        ports:
            - ${FRONTEND_PORT:-3000}:3000
        volumes:
            - ./services/webapp/src:/usr/src/app/src
            - ./services/webapp/build:/usr/src/app/build
        working_dir: /usr/src/app
        entrypoint: [ "yarn", "start" ]

    build:
        build:
            context: ./services/webapp
            dockerfile: Dockerfile.dev
        volumes:
            - ./services/webapp/src:/usr/src/app/src
            - ./services/webapp/build:/usr/src/app/build
        working_dir: /usr/src/app
        entrypoint: [ "yarn", "build" ]

    daemon:
        build:
            context: ./services/daemon
            dockerfile: Dockerfile.dev
        # depends_on:
        #     - postgres
        networks:
            - development
        environment:
            NODE_ENV: ${NODE_ENV:-development}
            BABEL_ENV: ${BABEL_ENV:-node}
            LOG_LEVEL: ${LOG_LEVEL:-verbose}
            API_ENDPOINT: ${API_ENDPOINT:-http://api:8080/api}
            API_TOKEN: ${API_TOKEN:-xxx}
            HOST_NAME: ${HOST_NAME:-localhost}
        volumes:
            - ./services/daemon/ssr:/usr/src/app/ssr
            - /var/lib/docker/containers:/var/lib/docker/containers:ro
            - /var/run/docker.sock:/var/run/docker.sock
        working_dir: /usr/src/app
        entrypoint: [ "yarn", "start:dev" ]
    
networks:
    development: